import asyncio
import websockets
import json
import threading
import time


class WebSocketListener:
    def __init__(self, uri="ws://127.0.0.1:8080/ws/robots"):
        self.uri = uri
        self.robot_data = {}  # B·ªô nh·ªõ ƒë·ªám d·ªØ li·ªáu robot
        self.ws_running = True  # C·ªù ƒëi·ªÅu khi·ªÉn WebSocket
        self.thread = threading.Thread(target=self.run_websocket_loop, daemon=True)
        self.thread.start()  # B·∫Øt ƒë·∫ßu lu·ªìng WebSocket

    def run_websocket_loop(self):
        """T·∫°o event loop ri√™ng cho WebSocket."""
        loop = asyncio.new_event_loop()
        asyncio.set_event_loop(loop)
        loop.run_until_complete(self.listen_robot_data())

    async def listen_robot_data(self):
        """L·∫Øng nghe WebSocket v√† c·∫≠p nh·∫≠t d·ªØ li·ªáu robot."""
        while self.ws_running:
            try:
                print("üîÑ K·∫øt n·ªëi WebSocket...")
                async with websockets.connect(self.uri) as websocket:
                    print("‚úÖ WebSocket ƒë√£ k·∫øt n·ªëi!")
                    while self.ws_running:
                        message = await websocket.recv()
                        data = json.loads(message)
                        self.robot_data = data  # L∆∞u d·ªØ li·ªáu v√†o b·ªô nh·ªõ
            except (websockets.exceptions.ConnectionClosed, ConnectionError) as e:
                print(f"‚ö†Ô∏è WebSocket l·ªói: {e}, th·ª≠ k·∫øt n·ªëi l·∫°i sau 5 gi√¢y...")
                await asyncio.sleep(5)

    def get_robot_data(self):
        """Tr·∫£ v·ªÅ d·ªØ li·ªáu robot hi·ªán t·∫°i."""
        return self.robot_data

    def stop(self):
        """D·ª´ng WebSocket khi tho√°t ch∆∞∆°ng tr√¨nh."""
        self.ws_running = False
